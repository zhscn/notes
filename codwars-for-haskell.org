#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="orgstyle.css"/>
nothing special, just wanna update blog
* 2019-02

** 17, 7 kyu, Square Every Digit
#+begin_quote
Welcome. In this kata, you are asked to square every digit of a number. For example, if we run 9119 through the function, 811181 will come out, because 9^2 is 81 and 1^2 is 1. Note: The function accepts an integer and returns an integer
#+end_quote

#+begin_src haskell
import Data.Char
dd x | x > 0 = sqr
     | otherwise = 0 - sqr
                   where sqr = (read (concat $ map show $ map (^2) (map digitToInt $ filter isNumber $ show x)) ::Int)
#+end_src

** 18, 7 kyu, Complementary DNA

#+begin_quote
In DNA strings, symbols “A” and “T” are complements of each other, as “C” and “G”. You have function with one side of the DNA (string, except for Haskell); you need to get the other complementary side. DNA strand is never empty or there is no DNA at all (again, except for Haskell).
#+end_quote

#+begin_src haskell
data Base = A | T | G | C
          deriving (Show,Eq,Ord,Enum)
type DNA = [Base]
dnaStrand :: DNA -> DNA
dnaStrand [] = []
dnaStrand (x:xs) = fil : dnaStrand xs
                   where fil = case x of
                                 A -> T
                                 T -> A
                                 C -> G
                                 G -> C
#+end_src

This is an answer of sp, use β reduction and higher order function

#+begin_src haskell
dnaStrand' = map $ \b -> case b of
  A -> T
  T -> A
  C -> G
  G -> C
#+end_src

** 19, 7 kyu, Descending Order

#+begin_quote
Your task is to make a function that can take any non-negative integer as a argument and return it with its digits in descending order. Essentially, rearrange the digits to create the highest possible number.

Examples: Input: 21445 Output: 54421

Input: 145263 Output: 654321

Input: 1254859723 Output: 9875543221

#+end_quote

my solution is :

#+begin_src haskell
insert x [] = [x]
insert x (y:ys) | x > y = x:y:ys
                | otherwise = y:insert x ys

insertionSort xs [] = xs
insertionSort xs (y:ys) = insertionSort (insert y xs) ys

descendingOrder :: Integer -> Integer
descendingOrder n = read (insertionSort [] $ show n) :: Integer
#+end_src

The `insertionSort` function is copy from the book, not handled. And sort function is defined in the `Data.List` . Here is a example which is better.

#+begin_src haskell
import Data.List (sort)
descendingOrder :: Integer -> Integer
descendingOrder = read . reverse . sort . show
#+end_src

*composite function* makes experssion cleaner.

** 20, 8 kyu, Even or Odd

#+begin_quote
Create a function (or write a script in Shell) that takes an integer as an argument and returns “Even” for even numbers or “Odd” for odd numbers.
#+end_quote

#+begin_src haskell
evenOrOdd :: Integral a => a -> [Char]
evenOrOdd n | even n = "Even"
            | otherwise = "Odd"
#+end_src

nothing special.

** 20, 7 kyu, Exes and Ohs

#+begin_quote
Check to see if a string has the same amount of ‘x’s and ‘o’s. The method must return a boolean and be case insensitive. The string can contain any char.
#+end_quote

The string should toLower first, I use an ugly method.

#+begin_src haskell
xo str | (length $ filter (=='x') str) + (length $ filter (=='X') str) == (length $ filter (=='o') str) + (length $ filter (=='O') str) = True
       | otherwise = False
import Data.Char (toLower)
import Data.List (filter)

xo :: String -> Bool
xo str = count 'x' str == count 'o' str
  where count char = length . filter ((==) char . toLower)
#+end_src

** 21, 7 kyu, Is this a triangle?

#+begin_quote
Implement a method that accepts 3 integer values a, b, c. The method should return true if a triangle can be built with the sides of given length and false in any other case.
#+end_quote

It’s easy.

#+begin_src haskell
import Data.List (sort)

isTriangle :: Int -> Int -> Int -> Bool
isTriangle a b c = x + y > z
    where x:y:z:[] = sort [a,b,c]
#+end_src

emmm, maybe `[x,y,z]` is better.

** 22, 6 kyu, Persistent Bugger

#+begin_quote
Write a function, persistence, that takes in a positive parameter num and returns its multiplicative persistence, which is the number of times you must multiply the digits in num until you reach a single digit. For example:

#+begin_src haskell
 persistence 39 -- returns 3, because 3*9=27, 2*7=14, 1*4=4
                -- and 4 has only one digit

 persistence 999 -- returns 4, because 9*9*9=729, 7*2*9=126,
                 -- 1*2*6=12, and finally 1*2=2

 persistence 4 -- returns 0, because 4 is already a one-digit number
#+end_src

#+end_quote

#+begin_src haskell
import Data.Char(digitToInt, isNumber)
mutipl [] n = n
mutipl (x:xs) n = mutipl (xs) $! n*x
per n m | n<10 = m+1
        | otherwise = per (mutipl (map digitToInt $ filter isNumber $ show n) 1) m+1
persistence n = if n <= 10 then 0 else per n (-1)
import Data.Char (digitToInt)

persistence :: Int -> Int
persistence n = if n < 10 then 0 else 1 + persistence (product $ map digitToInt $ show n)
#+end_src

** 26, 6 kyu, Detect Pangram

#+begin_quote
A pangram is a sentence that contains every single letter of the alphabet at least once. For example, the sentence “The quick brown fox jumps over the lazy dog” is a pangram, because it uses the letters A-Z at least once (case is irrelevant).

Given a string, detect whether or not it is a pangram. Return True if it is, False if not. Ignore numbers and punctuation.
#+end_quote

#+begin_src haskell
import Data.Char
import Data.List
isPangram str = aa [] (dele' (map toLower str)) == 26
aa xs [] = 0
aa xs str = if notElem (head str) xs then 1 + aa ((head str):xs) (tail str) else aa xs (tail str)
dele' st | elem ' ' st = dele' $ delete ' ' st
         | elem '.' st = dele' $ delete '.' st
         | otherwise = st
import Data.Char

isPangram :: String -> Bool
isPangram str = all (`elem` (map toLower str)) ['a'..'z']
#+end_src

** 26, 6 kyu, Write Number in Expanded Form (unfinshed)

#+begin_quote
You will be given a number and you will need to return it as a string in Expanded Form. For example:

expandedForm 12 – Should return ‘10 + 2’ expandedForm 42 – Should return ‘40 + 2’ expandedForm 70304 – Should return ‘70000 + 300 + 4’
#+end_quote

exemple:

#+begin_src haskell
import Data.List (intercalate)

expandedForm :: Int -> String
expandedForm = intercalate " + " . map(\(n, c) ->  c : replicate n '0' ) . reverse . filter ((/='0') . snd) . zip [0..] . reverse . show
#+end_src

** 27, 7 kyu, Find divisors of a number

#+begin_quote
Find the number of divisors of a positive integer n.

Random tests go up to n = 500000.

Examples divisors 4 = 3 – 1, 2, 4 divisors 5 = 2 – 1, 5 divisors 12 = 6 – 1, 2, 3, 4, 6, 12 divisors 30 = 8 – 1, 2, 3, 5, 6, 10, 15, 30
#+end_quote

#+begin_src haskell
divisors :: Integral a => a -> Int
divisors x = length $ filter (\a -> mod x a == 0) [1..x]
#+end_src

** 27, 6 kyu, Highest Scoring Word (unfinshed)

#+begin_quote
Given a string of words, you need to find the highest scoring word.

Each letter of a word scores points according to it’s position in the alphabet: a = 1, b = 2, c = 3 etc.

You need to return the highest scoring word as a string.

If two words score the same, return the word that appears earliest in the original string.

All letters will be lowercase and all inputs will be valid.
#+end_quote

#+begin_src haskell
import Data.Char (ord, toLower)
import Data.Ord (comparing)
import Data.List (maximumBy)

high :: String -> String
high [] = []
high s = maximumBy (comparing (sum . map ((+ (negate . pred . ord $ 'a')) . ord . toLower))) . words $ s
#+end_src

** 28, 5 kyu, What’s a Perfect Power anyway?

#+begin_quote
A perfect power is a classification of positive integers:

In mathematics, a perfect power is a positive integer that can be expressed as an integer power of another positive integer. More formally, n is a perfect power if there exist natural numbers m > 1, and k > 1 such that m^k = n.

Your task is to check wheter a given integer is a perfect power. If it is a perfect power, return a pair m and k with m^k = n as a proof. Otherwise return Nothing, Nil, null, NULL, None or your language’s equivalent.

Note: For a perfect power, there might be several pairs. For example 81 = 3^4 = 9^2, so (3,4) and (9,2) are valid solutions. However, the tests take care of this, so if a number is a perfect power, return any pair that proves it.

Examples isPP 4 shod––Beshod̲Be Just (2,2) isPP 9 shod––Beshod̲Be Just (3,2) isPP 5 shod––Beshod̲Be Nothing
#+end_quote

#+begin_src haskell
import Data.List
isPP :: Integer -> Maybe (Integer, Integer)
isPP n
    | null $ isP n = Nothing
    | otherwise = Just $ head $ isP n
isP n = [(m,k) | m <- [2..a], k <- [2..b], m^k == n]
    where a = round $ sqrt (fromIntegral n :: Float)
          b = head [c | c <- [1..n], 2^c >= n]
isPP :: Integer -> Maybe (Integer, Integer)
isPP i = go (2,2)
  where go (a,b) | a^b == i  = Just (a,b)
                 | a^b  < i  = go (a,b+1)
                 | b > 2     = go (a+1,1)
                 | otherwise = Nothing
#+end_src

* 2019-03

** 1, 6 kyu, Find the unique number

#+begin_quote
There is an array with some numbers. All numbers are equal except for one. Try to find it!
getUnique [1, 1, 1, 2, 1, 1] – Result is 2 getUnique [0, 0, 0.55, 0, 0] – Result is 0.55 It’s guaranteed that array contains more than 3 numbers.
#+end_quote

#+begin_src haskell
getUnique (x:s)
    | all (== head s) s = x
    | otherwise = head $ filter (/=x) s
#+end_src

pretty clean, isn’t it?

** 2, 7 kyu, Number of People in the Bus

#+begin_quote
There is a bus moving in the city, and it takes and drop some people in each bus stop.

You are provided with a list (or array) of integer arrays (or tuples). Each integer array has two items which represent number of people get into bus (The first item) and number of people get off the bus (The second item) in a bus stop.

Your task is to return number of people who are still in the bus after the last bus station (after the last array). Even though it is the last bus stop, the bus is not empty and some people are still in the bus, and they are probably sleeping there :D

Take a look on the test cases.

Please keep in mind that the test cases ensure that the number of people in the bus is always >= 0. So the return integer can’t be negative.

The second value in the first integer array is 0, since the bus is empty in the first bus stop.
#+end_quote

#+begin_src haskell
number :: [(Int, Int)] -> Int
number = sum . map (\(a,b) -> a - b)
number' = sum . map (uncurry (-))
#+end_src

the type of the `uncurry` is `(a -> b -> c) -> (a, b) -> c`

** 2, 6 kyu, Consecutive strings

#+begin_quote
You are given an array strarr of strings and an integer k. Your task is to return the first longest string consisting of k consecutive strings taken in the array.

Example: longest_consec([“zone”, “abigail”, “theta”, “form”, “libe”, “zas”, “theta”, “abigail”], 2) –> “abigailtheta”

n being the length of the string array, if n = 0 or k > n or k <= 0 return “”.
#+end_quote

#+begin_src haskell
import Data.List
longestConsec str k | null str = ""
                    | k == 0 = ""
                    | length str < k = ""
                    | otherwise = fst $ head $ filter (\(a,b) -> b == maxx) $ zip wstr $ map length wstr
                    where wstr = words $ lc str k
                          maxx = last $ sort $ map length wstr

lc str k | length str == k = concat str
         | otherwise = concat (take k str) ++ " " ++ lc (tail str) k
import Data.Ord (comparing)
import Data.List (maximumBy, tails)
import Data.Monoid ((<>))

longestConsec :: [String] -> Int -> String
longestConsec [] _ = ""
longestConsec ss k | k > length ss = ""
                   | k <= 0        = ""
                   | otherwise     = maximumBy (favor .: comparing length)
                                   . map (concat . take k)
                                   . tails
                                   $ ss
  where
    favor = (<> GT) -- Monoid on Ordering, maximumBy is foldr
    (.:) = (.) . (.) -- (c -> d) -> (a -> b -> c) -> a -> b -> d
#+end_src
